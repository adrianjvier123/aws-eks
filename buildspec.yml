version: 0.2

phases:
  install:
    commands:
      - echo Installing dependencies...
      - pip install -r requirements.txt
      - echo Obtaining ECR login password and logging in to Docker...
      - LOGIN_PASSWORD=$(aws ecr get-login-password --region $AWS_REGION)
      - echo "$LOGIN_PASSWORD" | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - export KUBECONFIG=$HOME/.kube/config

  build:
    commands:
      - echo Building Docker image...
      - docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPOSITORY_NAME}:latest .
      - echo Pushing Docker image to ECR...
      - docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPOSITORY_NAME}:latest

  post_build:
    commands:
      - echo Downloading deployment.yml from S3...
      - aws s3 cp s3://tfstate-adrian-jimenez-s3/path/deployment.yml deployment.yml
      - echo Assuming role for EKS kubectl access...
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')
      - export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')
      - export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')
      - export AWS_EXPIRATION=$(echo $CREDENTIALS | jq -r '.Credentials.Expiration')
      - echo Updating kubeconfig...
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
      - echo Verifying kubeconfig...
      - cat $HOME/.kube/config
      - kubectl config current-context
      - echo Applying deployment.yml to EKS cluster...
      - kubectl apply -f deployment.yml
artifacts:
  files: []
